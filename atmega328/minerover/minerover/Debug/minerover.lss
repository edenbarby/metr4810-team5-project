
minerover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  00800100  00800100  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000866  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000049a  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053d  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031d  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a8  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002a6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_18>
  4c:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 3d       	cpi	r26, 0xDA	; 218
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
/* private variables *********************************************************/
/* private function prototypes ***********************************************/


int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x8>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << PORTB2);
  9e:	22 9a       	sbi	0x04, 2	; 4
    uint8_t i;
    int8_t speed;
    uint8_t input[5];
    float time_packet_last;

    motor_init();
  a0:	0e 94 c9 00 	call	0x192	; 0x192 <motor_init>
    servo_init();
  a4:	0e 94 1e 01 	call	0x23c	; 0x23c <servo_init>
    time_init();
  a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <time_init>
    uart_init();
  ac:	0e 94 0d 02 	call	0x41a	; 0x41a <uart_init>

    sei();
  b0:	78 94       	sei

    time_packet_last = time_ms();
  b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <time_ms>
  b6:	4b 01       	movw	r8, r22
  b8:	5c 01       	movw	r10, r24
  ba:	7e 01       	movw	r14, r28
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	e8 0e       	add	r14, r24
  c0:	f1 1c       	adc	r15, r1
        // [START, left motor, right motor, servo angle, STOP]
        // Left motor and right motor will be speed values ranging from -100 to
        // 100 centered around 100 (i.e. 0 - 200). The servo angle will be a
        // a value from 0 to 100. 0 is the servo fully open and 100 is the servo
        // fully closed.
        if(uart_input_available()) {
  c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <uart_input_available>
  c6:	88 23       	and	r24, r24
  c8:	09 f4       	brne	.+2      	; 0xcc <main+0x3c>
  ca:	4b c0       	rjmp	.+150    	; 0x162 <main+0xd2>
            input[0] = uart_getc();
  cc:	0e 94 9c 02 	call	0x538	; 0x538 <uart_getc>

            if(input[0] == START) {
  d0:	82 31       	cpi	r24, 0x12	; 18
  d2:	09 f0       	breq	.+2      	; 0xd6 <main+0x46>
  d4:	46 c0       	rjmp	.+140    	; 0x162 <main+0xd2>
  d6:	8e 01       	movw	r16, r28
  d8:	0e 5f       	subi	r16, 0xFE	; 254
  da:	1f 4f       	sbci	r17, 0xFF	; 255
                for(i = 1; i < 5; i++) input[i] = uart_getc();
  dc:	0e 94 9c 02 	call	0x538	; 0x538 <uart_getc>
  e0:	f8 01       	movw	r30, r16
  e2:	81 93       	st	Z+, r24
  e4:	8f 01       	movw	r16, r30
  e6:	ee 15       	cp	r30, r14
  e8:	ff 05       	cpc	r31, r15
  ea:	c1 f7       	brne	.-16     	; 0xdc <main+0x4c>

                if(input[4] == STOP) {
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	89 38       	cpi	r24, 0x89	; 137
  f0:	a9 f5       	brne	.+106    	; 0x15c <main+0xcc>
                    speed = input[1] - 100;
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	84 56       	subi	r24, 0x64	; 100
                    if(speed > 0) motor_left(speed, 1);
  f6:	18 16       	cp	r1, r24
  f8:	24 f4       	brge	.+8      	; 0x102 <main+0x72>
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <motor_left>
 100:	0d c0       	rjmp	.+26     	; 0x11c <main+0x8c>
                    else if(speed == 0) motor_left(0, 0);
 102:	81 11       	cpse	r24, r1
 104:	05 c0       	rjmp	.+10     	; 0x110 <main+0x80>
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <motor_left>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <main+0x8c>
                    else if(speed < 0) motor_left(-speed, -1);
 110:	88 23       	and	r24, r24
 112:	24 f4       	brge	.+8      	; 0x11c <main+0x8c>
 114:	6f ef       	ldi	r22, 0xFF	; 255
 116:	81 95       	neg	r24
 118:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <motor_left>
                
                    speed = input[2] - 100;
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	84 56       	subi	r24, 0x64	; 100
                    if(speed > 0) motor_right(speed, 1);
 120:	18 16       	cp	r1, r24
 122:	24 f4       	brge	.+8      	; 0x12c <main+0x9c>
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 03 01 	call	0x206	; 0x206 <motor_right>
 12a:	0d c0       	rjmp	.+26     	; 0x146 <main+0xb6>
                    else if(speed == 0) motor_right(0, 0);
 12c:	81 11       	cpse	r24, r1
 12e:	05 c0       	rjmp	.+10     	; 0x13a <main+0xaa>
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 03 01 	call	0x206	; 0x206 <motor_right>
 138:	06 c0       	rjmp	.+12     	; 0x146 <main+0xb6>
                    else if(speed < 0) motor_right(-speed, -1);
 13a:	88 23       	and	r24, r24
 13c:	24 f4       	brge	.+8      	; 0x146 <main+0xb6>
 13e:	6f ef       	ldi	r22, 0xFF	; 255
 140:	81 95       	neg	r24
 142:	0e 94 03 01 	call	0x206	; 0x206 <motor_right>
                
                    servo_claw_angle(input[3]);
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	0e 94 3d 01 	call	0x27a	; 0x27a <servo_claw_angle>
                
                    time_packet_last = time_ms();
 14c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <time_ms>
 150:	4b 01       	movw	r8, r22
 152:	5c 01       	movw	r10, r24
                    uart_putc(ACK);
 154:	88 ef       	ldi	r24, 0xF8	; 248
 156:	0e 94 5e 02 	call	0x4bc	; 0x4bc <uart_putc>
 15a:	03 c0       	rjmp	.+6      	; 0x162 <main+0xd2>
                } else {
                    uart_putc(NACK);
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <uart_putc>
                }
            }
        }
        
        if(time_ms() - time_packet_last > SERIAL_TIMEOUT) {
 162:	0e 94 7f 01 	call	0x2fe	; 0x2fe <time_ms>
 166:	a5 01       	movw	r20, r10
 168:	94 01       	movw	r18, r8
 16a:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	48 ec       	ldi	r20, 0xC8	; 200
 174:	52 e4       	ldi	r21, 0x42	; 66
 176:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__gesf2>
 17a:	18 16       	cp	r1, r24
 17c:	0c f0       	brlt	.+2      	; 0x180 <main+0xf0>
 17e:	a1 cf       	rjmp	.-190    	; 0xc2 <main+0x32>
            motor_left(0, 0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <motor_left>
            motor_right(0, 0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 03 01 	call	0x206	; 0x206 <motor_right>
 190:	98 cf       	rjmp	.-208    	; 0xc2 <main+0x32>

00000192 <motor_init>:
/* private function prototypes ***********************************************/


extern void motor_init(void)
{
    DDRB |= (1 << PORTB5) | (1 << PORTB4);
 192:	84 b1       	in	r24, 0x04	; 4
 194:	80 63       	ori	r24, 0x30	; 48
 196:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PORTD6) | (1 << PORTD7) | (1 << PORTD5) | (1 << PORTD2);
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	84 6e       	ori	r24, 0xE4	; 228
 19c:	8a b9       	out	0x0a, r24	; 10

    PORTB &= ~((1 << PORTB4) | (1 << PORTB5));
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 7c       	andi	r24, 0xCF	; 207
 1a2:	85 b9       	out	0x05, r24	; 5
    PORTD &= ~((1 << PORTD2) | (1 << PORTD7));
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8b 77       	andi	r24, 0x7B	; 123
 1a8:	8b b9       	out	0x0b, r24	; 11

    OCR0A = 0;
 1aa:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;
 1ac:	18 bc       	out	0x28, r1	; 40
    
    // Clear timer control registers.
    TCCR0A = 0;
 1ae:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
 1b0:	15 bc       	out	0x25, r1	; 37
    
    // Set timer 0 A and B to clear on compare match.
    TCCR0A |= (1 << COM0A1) | (0 << COM0A0);
 1b2:	84 b5       	in	r24, 0x24	; 36
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= (1 << COM0B1) | (0 << COM0B0);
 1b8:	84 b5       	in	r24, 0x24	; 36
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	84 bd       	out	0x24, r24	; 36
    
    // Set timer 0 to fast PWM with a TOP value of 0xFF.
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
 1be:	84 b5       	in	r24, 0x24	; 36
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (0 << WGM02);
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	85 bd       	out	0x25, r24	; 37
    
    // No clock prescaler.
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 1c8:	85 b5       	in	r24, 0x25	; 37
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 bd       	out	0x25, r24	; 37
 1ce:	08 95       	ret

000001d0 <motor_left>:
}

extern void motor_left(uint8_t speed, int8_t direction)
{
 1d0:	85 36       	cpi	r24, 0x65	; 101
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <motor_left+0x6>
 1d4:	84 e6       	ldi	r24, 0x64	; 100
    if(speed < 0) speed = 0;
    if(speed > 100) speed = 100;
    
    if(direction > 0) {
 1d6:	16 16       	cp	r1, r22
 1d8:	1c f4       	brge	.+6      	; 0x1e0 <motor_left+0x10>
        // Forward
        PORTB |=  (1 << PORTB4);
 1da:	2c 9a       	sbi	0x05, 4	; 5
        PORTB &= ~(1 << PORTB5);
 1dc:	2d 98       	cbi	0x05, 5	; 5
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <motor_left+0x22>
    } else if(direction == 0) {
 1e0:	61 11       	cpse	r22, r1
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <motor_left+0x1a>
        // Stationary
        PORTB &= ~(1 << PORTB4);
 1e4:	2c 98       	cbi	0x05, 4	; 5
        PORTB &= ~(1 << PORTB5);
 1e6:	2d 98       	cbi	0x05, 5	; 5
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <motor_left+0x22>
    } else if(direction < 0) {
 1ea:	66 23       	and	r22, r22
 1ec:	14 f4       	brge	.+4      	; 0x1f2 <motor_left+0x22>
        // Backward
        PORTB &= ~(1 << PORTB4);
 1ee:	2c 98       	cbi	0x05, 4	; 5
        PORTB |=  (1 << PORTB5);
 1f0:	2d 9a       	sbi	0x05, 5	; 5
    }
    
    OCR0B = (uint8_t)((speed * 255) / 100);
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	82 9f       	mul	r24, r18
 1f6:	c0 01       	movw	r24, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 df 04 	call	0x9be	; 0x9be <__divmodhi4>
 202:	68 bd       	out	0x28, r22	; 40
 204:	08 95       	ret

00000206 <motor_right>:
}

extern void motor_right(uint8_t speed, int8_t direction)
{
 206:	85 36       	cpi	r24, 0x65	; 101
 208:	08 f0       	brcs	.+2      	; 0x20c <motor_right+0x6>
 20a:	84 e6       	ldi	r24, 0x64	; 100
    if(speed < 0) speed = 0;
    if(speed > 100) speed = 100;
    
    if(direction > 0) {
 20c:	16 16       	cp	r1, r22
 20e:	1c f4       	brge	.+6      	; 0x216 <motor_right+0x10>
        // Forward
        PORTD |=  (1 << PORTD2);
 210:	5a 9a       	sbi	0x0b, 2	; 11
        PORTD &= ~(1 << PORTD7);
 212:	5f 98       	cbi	0x0b, 7	; 11
 214:	09 c0       	rjmp	.+18     	; 0x228 <motor_right+0x22>
        } else if(direction == 0) {
 216:	61 11       	cpse	r22, r1
 218:	03 c0       	rjmp	.+6      	; 0x220 <motor_right+0x1a>
        // Stationary
        PORTD &= ~(1 << PORTD2);
 21a:	5a 98       	cbi	0x0b, 2	; 11
        PORTD &= ~(1 << PORTD7);
 21c:	5f 98       	cbi	0x0b, 7	; 11
 21e:	04 c0       	rjmp	.+8      	; 0x228 <motor_right+0x22>
        } else if(direction < 0) {
 220:	66 23       	and	r22, r22
 222:	14 f4       	brge	.+4      	; 0x228 <motor_right+0x22>
        // Backward
        PORTD &= ~(1 << PORTD2);
 224:	5a 98       	cbi	0x0b, 2	; 11
        PORTD |=  (1 << PORTD7);
 226:	5f 9a       	sbi	0x0b, 7	; 11
    }
    
    OCR0A = (uint8_t)((speed * 255) / 100);
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	82 9f       	mul	r24, r18
 22c:	c0 01       	movw	r24, r0
 22e:	11 24       	eor	r1, r1
 230:	64 e6       	ldi	r22, 0x64	; 100
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 df 04 	call	0x9be	; 0x9be <__divmodhi4>
 238:	67 bd       	out	0x27, r22	; 39
 23a:	08 95       	ret

0000023c <servo_init>:
#endif // SERVO2_EN


extern void servo_init(void)
{
    ICR1 = SERVO_TOP;
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	97 e2       	ldi	r25, 0x27	; 39
 240:	90 93 87 00 	sts	0x0087, r25
 244:	80 93 86 00 	sts	0x0086, r24
    
    TCCR1A = 0;
 248:	a0 e8       	ldi	r26, 0x80	; 128
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	1c 92       	st	X, r1
    TCCR1B = 0;
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	10 82       	st	Z, r1
    // Set timer 1 b to clear on compare match.
    TCCR1A |= (1 << COM1B1) | (0 << COM1B1);
#endif // SERVO1_EN

#ifdef SERVO2_EN
    DDRB |= (1 << PORTB1);
 254:	21 9a       	sbi	0x04, 1	; 4
    
    OCR1A = SERVO_DEFAULT;
 256:	8d ee       	ldi	r24, 0xED	; 237
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	90 93 89 00 	sts	0x0089, r25
 25e:	80 93 88 00 	sts	0x0088, r24
    
    // Set timer 1 a to clear on compare match.
    TCCR1A |= (1 << COM1A1) | (0 << COM1A1);
 262:	8c 91       	ld	r24, X
 264:	80 68       	ori	r24, 0x80	; 128
 266:	8c 93       	st	X, r24
#endif // SERVO2_EN


    // Set timer 1 to generate a phase and frequency correct PWM signal with
    // ICR1 as TOP.
    TCCR1A |= (0 << WGM11) | (0 << WGM10);
 268:	8c 91       	ld	r24, X
 26a:	8c 93       	st	X, r24
    TCCR1B |= (1 << WGM13) | (0 << WGM12);
 26c:	80 81       	ld	r24, Z
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	80 83       	st	Z, r24

    // Set the timer 1 clock source to have a prescaler of 8.
    TCCR1B |= (0 << CS12) | (1 << CS11) | (0 << CS10);
 272:	80 81       	ld	r24, Z
 274:	82 60       	ori	r24, 0x02	; 2
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <servo_claw_angle>:
}

extern void servo_claw_angle(uint8_t angle)
{
 27a:	85 36       	cpi	r24, 0x65	; 101
 27c:	08 f0       	brcs	.+2      	; 0x280 <servo_claw_angle+0x6>
 27e:	84 e6       	ldi	r24, 0x64	; 100
#endif // SERVO1_EN

#ifdef SERVO2_EN
static void servo_two_angle(uint8_t angle)
{
    OCR1A = (uint16_t)(((SERVO_MAX - SERVO_MIN) * angle) / 100 + SERVO_MIN);
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	a4 ef       	ldi	r26, 0xF4	; 244
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	0e 94 12 05 	call	0xa24	; 0xa24 <__umulhisi3>
 28c:	24 e6       	ldi	r18, 0x64	; 100
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__divmodsi4>
 298:	2d 50       	subi	r18, 0x0D	; 13
 29a:	3e 4f       	sbci	r19, 0xFE	; 254
 29c:	30 93 89 00 	sts	0x0089, r19
 2a0:	20 93 88 00 	sts	0x0088, r18
 2a4:	08 95       	ret

000002a6 <time_init>:

/* private function prototypes ***********************************************/


extern void time_init(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
    tick = 0;
 2aa:	10 92 d2 01 	sts	0x01D2, r1
 2ae:	10 92 d3 01 	sts	0x01D3, r1
 2b2:	10 92 d4 01 	sts	0x01D4, r1
 2b6:	10 92 d5 01 	sts	0x01D5, r1
 2ba:	10 92 d6 01 	sts	0x01D6, r1
 2be:	10 92 d7 01 	sts	0x01D7, r1
 2c2:	10 92 d8 01 	sts	0x01D8, r1
 2c6:	10 92 d9 01 	sts	0x01D9, r1
    
    TCCR2A = 0;
 2ca:	c0 eb       	ldi	r28, 0xB0	; 176
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	18 82       	st	Y, r1
    TCCR2B = 0;
 2d0:	e1 eb       	ldi	r30, 0xB1	; 177
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	10 82       	st	Z, r1
    TIMSK2 = 0;
 2d6:	a0 e7       	ldi	r26, 0x70	; 112
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	1c 92       	st	X, r1
    
    OCR2A = (uint8_t)(TIMER2_TICK / TIMER2_COMPARE - 1);
 2dc:	83 e6       	ldi	r24, 0x63	; 99
 2de:	80 93 b3 00 	sts	0x00B3, r24
    
    // Set to clear on compare match.
    TCCR2A |= (1 << WGM21) | (0 << WGM20);
 2e2:	88 81       	ld	r24, Y
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	88 83       	st	Y, r24
    TCCR2B |= (0 << WGM22);
 2e8:	80 81       	ld	r24, Z
 2ea:	80 83       	st	Z, r24
    
    // Set prescaler to 8.
    TCCR2B |= (0 << CS22) | (1 << CS21) | (0 << CS20);
 2ec:	80 81       	ld	r24, Z
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	80 83       	st	Z, r24
    
    // Enable timer compare match A interrupt.
    TIMSK2 |= (0 << OCIE2B) | (1 << OCIE2A) | (0 << TOIE2);
 2f2:	8c 91       	ld	r24, X
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	8c 93       	st	X, r24
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <time_ms>:

extern float time_ms(void)
{
 2fe:	8f 92       	push	r8
 300:	9f 92       	push	r9
 302:	af 92       	push	r10
 304:	bf 92       	push	r11
 306:	cf 92       	push	r12
 308:	df 92       	push	r13
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
    return ((float)(1000 * tick) / TIMER2_COMPARE);
 316:	80 90 d2 01 	lds	r8, 0x01D2
 31a:	90 90 d3 01 	lds	r9, 0x01D3
 31e:	d0 91 d4 01 	lds	r29, 0x01D4
 322:	c0 91 d5 01 	lds	r28, 0x01D5
 326:	b0 91 d6 01 	lds	r27, 0x01D6
 32a:	a0 91 d7 01 	lds	r26, 0x01D7
 32e:	f0 91 d8 01 	lds	r31, 0x01D8
 332:	e0 91 d9 01 	lds	r30, 0x01D9
 336:	28 2d       	mov	r18, r8
 338:	39 2d       	mov	r19, r9
 33a:	4d 2f       	mov	r20, r29
 33c:	5c 2f       	mov	r21, r28
 33e:	6b 2f       	mov	r22, r27
 340:	7a 2f       	mov	r23, r26
 342:	8f 2f       	mov	r24, r31
 344:	9e 2f       	mov	r25, r30
 346:	06 e0       	ldi	r16, 0x06	; 6
 348:	0e 94 21 05 	call	0xa42	; 0xa42 <__ashldi3>
 34c:	a8 2c       	mov	r10, r8
 34e:	b9 2c       	mov	r11, r9
 350:	cd 2e       	mov	r12, r29
 352:	dc 2e       	mov	r13, r28
 354:	eb 2e       	mov	r14, r27
 356:	fa 2e       	mov	r15, r26
 358:	0f 2f       	mov	r16, r31
 35a:	1e 2f       	mov	r17, r30
 35c:	0e 94 46 05 	call	0xa8c	; 0xa8c <__subdi3>
 360:	01 e0       	ldi	r16, 0x01	; 1
 362:	0e 94 21 05 	call	0xa42	; 0xa42 <__ashldi3>
 366:	0f 2f       	mov	r16, r31
 368:	0e 94 46 05 	call	0xa8c	; 0xa8c <__subdi3>
 36c:	03 e0       	ldi	r16, 0x03	; 3
 36e:	0e 94 21 05 	call	0xa42	; 0xa42 <__ashldi3>
 372:	0e 94 27 04 	call	0x84e	; 0x84e <__floatundisf>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e4       	ldi	r19, 0x40	; 64
 37a:	4c e1       	ldi	r20, 0x1C	; 28
 37c:	56 e4       	ldi	r21, 0x46	; 70
 37e:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	bf 90       	pop	r11
 394:	af 90       	pop	r10
 396:	9f 90       	pop	r9
 398:	8f 90       	pop	r8
 39a:	08 95       	ret

0000039c <__vector_7>:
{
    float start = time_ms();
    while((time_ms() - start) < delay) _delay_us(50);
}

ISR(TIMER2_COMPA_vect) {
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
    tick++;
 3b8:	20 91 d2 01 	lds	r18, 0x01D2
 3bc:	30 91 d3 01 	lds	r19, 0x01D3
 3c0:	40 91 d4 01 	lds	r20, 0x01D4
 3c4:	50 91 d5 01 	lds	r21, 0x01D5
 3c8:	60 91 d6 01 	lds	r22, 0x01D6
 3cc:	70 91 d7 01 	lds	r23, 0x01D7
 3d0:	80 91 d8 01 	lds	r24, 0x01D8
 3d4:	90 91 d9 01 	lds	r25, 0x01D9
 3d8:	a1 e0       	ldi	r26, 0x01	; 1
 3da:	0e 94 3a 05 	call	0xa74	; 0xa74 <__adddi3_s8>
 3de:	20 93 d2 01 	sts	0x01D2, r18
 3e2:	30 93 d3 01 	sts	0x01D3, r19
 3e6:	40 93 d4 01 	sts	0x01D4, r20
 3ea:	50 93 d5 01 	sts	0x01D5, r21
 3ee:	60 93 d6 01 	sts	0x01D6, r22
 3f2:	70 93 d7 01 	sts	0x01D7, r23
 3f6:	80 93 d8 01 	sts	0x01D8, r24
 3fa:	90 93 d9 01 	sts	0x01D9, r25
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <uart_init>:

/* private function prototypes ***********************************************/


extern void uart_init(void)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
    // Setup the buffers by clearing them.
    memset((void *)uart_buffer_output.buffer, 0, UART_BUFFER_SIZE);
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	e9 e6       	ldi	r30, 0x69	; 105
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	df 01       	movw	r26, r30
 426:	98 2f       	mov	r25, r24
 428:	1d 92       	st	X+, r1
 42a:	9a 95       	dec	r25
 42c:	e9 f7       	brne	.-6      	; 0x428 <uart_init+0xe>
    uart_buffer_output.index   = 0;
 42e:	10 92 ce 01 	sts	0x01CE, r1
 432:	10 92 cd 01 	sts	0x01CD, r1
    uart_buffer_output.bytes   = 0;
 436:	10 92 d0 01 	sts	0x01D0, r1
 43a:	10 92 cf 01 	sts	0x01CF, r1
    uart_buffer_output.overrun = 0;
 43e:	10 92 d1 01 	sts	0x01D1, r1

    memset((void *)uart_buffer_input.buffer, 0, UART_BUFFER_SIZE);
 442:	e0 e0       	ldi	r30, 0x00	; 0
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	df 01       	movw	r26, r30
 448:	1d 92       	st	X+, r1
 44a:	8a 95       	dec	r24
 44c:	e9 f7       	brne	.-6      	; 0x448 <uart_init+0x2e>
    uart_buffer_input.index   = 0;
 44e:	10 92 65 01 	sts	0x0165, r1
 452:	10 92 64 01 	sts	0x0164, r1
    uart_buffer_input.bytes   = 0;
 456:	10 92 67 01 	sts	0x0167, r1
 45a:	10 92 66 01 	sts	0x0166, r1
    uart_buffer_input.overrun = 0;
 45e:	10 92 68 01 	sts	0x0168, r1

    UCSR0A = 0;
 462:	c0 ec       	ldi	r28, 0xC0	; 192
 464:	d0 e0       	ldi	r29, 0x00	; 0
 466:	18 82       	st	Y, r1
    UCSR0B = 0;
 468:	a1 ec       	ldi	r26, 0xC1	; 193
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	1c 92       	st	X, r1
    UCSR0C = 0;
 46e:	e2 ec       	ldi	r30, 0xC2	; 194
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	10 82       	st	Z, r1

    // Set the BAUD rate register.
    UBRR0H = (uint8_t)(UART_UBRR >> 8);
 474:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)(UART_UBRR >> 0);
 478:	83 e3       	ldi	r24, 0x33	; 51
 47a:	80 93 c4 00 	sts	0x00C4, r24

    // Disable the UART double transmission speed mode.
    UCSR0A |= (0 << U2X0);
 47e:	88 81       	ld	r24, Y
 480:	88 83       	st	Y, r24

    // Disable multi-processor communication mode.
    UCSR0A |= (0 << MPCM0);
 482:	88 81       	ld	r24, Y
 484:	88 83       	st	Y, r24

    // Enable the receive complete and the data register empty interrupt and
    // disable the transmit complete interrupt.
    UCSR0B |= (1 << RXCIE0) | (0 << TXCIE0) | (1 << UDRIE0);
 486:	8c 91       	ld	r24, X
 488:	80 6a       	ori	r24, 0xA0	; 160
 48a:	8c 93       	st	X, r24

    // Enable the receiver and transmitter.
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 48c:	8c 91       	ld	r24, X
 48e:	88 61       	ori	r24, 0x18	; 24
 490:	8c 93       	st	X, r24

    // Use 8 bit characters.
    UCSR0B |= (0 << UCSZ02);
 492:	8c 91       	ld	r24, X
 494:	8c 93       	st	X, r24
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 496:	80 81       	ld	r24, Z
 498:	86 60       	ori	r24, 0x06	; 6
 49a:	80 83       	st	Z, r24

    // Enable the asynchronous mode.
    UCSR0C |= (0 << UMSEL01) | (0 << UMSEL00);
 49c:	80 81       	ld	r24, Z
 49e:	80 83       	st	Z, r24

    // Disable parity.
    UCSR0C |= (0 << UPM01) | (0 << UPM00);
 4a0:	80 81       	ld	r24, Z
 4a2:	80 83       	st	Z, r24

    // Use 1 stop bits.
    UCSR0C |= (0 << USBS0);
 4a4:	80 81       	ld	r24, Z
 4a6:	80 83       	st	Z, r24

    // Write zero to the clock polarity bit because we are using asynchronous mode.
    UCSR0C |= (0 << UCPOL0);
 4a8:	80 81       	ld	r24, Z
 4aa:	80 83       	st	Z, r24
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <uart_input_available>:

extern uint8_t uart_input_available(void)
{
    return uart_buffer_input.bytes;
 4b2:	80 91 66 01 	lds	r24, 0x0166
 4b6:	90 91 67 01 	lds	r25, 0x0167
}
 4ba:	08 95       	ret

000004bc <uart_putc>:
extern uint8_t uart_putc(uint8_t c)
{
    uint8_t interrupts_enabled;

    // If the output buffer is full return 1 and set the buffer overrun flag.
    if(uart_buffer_output.bytes >= UART_BUFFER_SIZE) {
 4bc:	20 91 cf 01 	lds	r18, 0x01CF
 4c0:	30 91 d0 01 	lds	r19, 0x01D0
 4c4:	24 36       	cpi	r18, 0x64	; 100
 4c6:	31 05       	cpc	r19, r1
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <uart_putc+0x16>
        uart_buffer_output.overrun = 1;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 d1 01 	sts	0x01D1, r24
        return 1;
 4d0:	08 95       	ret
    }

    // Copy the status register and disable interrupts before adding to the
    // buffer. This will stop the ISR from modifying the buffer at the same time.
    interrupts_enabled = (SREG >> SREG_I) & 0x1;
 4d2:	9f b7       	in	r25, 0x3f	; 63
 4d4:	99 1f       	adc	r25, r25
 4d6:	99 27       	eor	r25, r25
 4d8:	99 1f       	adc	r25, r25
    cli();
 4da:	f8 94       	cli

    uart_buffer_output.buffer[uart_buffer_output.index] = c;
 4dc:	ad ec       	ldi	r26, 0xCD	; 205
 4de:	b1 e0       	ldi	r27, 0x01	; 1
 4e0:	ed 91       	ld	r30, X+
 4e2:	fc 91       	ld	r31, X
 4e4:	11 97       	sbiw	r26, 0x01	; 1
 4e6:	e7 59       	subi	r30, 0x97	; 151
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 83       	st	Z, r24
    uart_buffer_output.bytes++;
 4ec:	ef ec       	ldi	r30, 0xCF	; 207
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	20 81       	ld	r18, Z
 4f2:	31 81       	ldd	r19, Z+1	; 0x01
 4f4:	2f 5f       	subi	r18, 0xFF	; 255
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	31 83       	std	Z+1, r19	; 0x01
 4fa:	20 83       	st	Z, r18

    // If the index has reached the end, wrap around.
    if(uart_buffer_output.index + 1 == UART_BUFFER_SIZE) {
 4fc:	2d 91       	ld	r18, X+
 4fe:	3c 91       	ld	r19, X
 500:	23 36       	cpi	r18, 0x63	; 99
 502:	31 05       	cpc	r19, r1
 504:	29 f4       	brne	.+10     	; 0x510 <uart_putc+0x54>
        uart_buffer_output.index = 0;
 506:	10 92 ce 01 	sts	0x01CE, r1
 50a:	10 92 cd 01 	sts	0x01CD, r1
 50e:	08 c0       	rjmp	.+16     	; 0x520 <uart_putc+0x64>
    } else uart_buffer_output.index++;
 510:	ed ec       	ldi	r30, 0xCD	; 205
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	20 81       	ld	r18, Z
 516:	31 81       	ldd	r19, Z+1	; 0x01
 518:	2f 5f       	subi	r18, 0xFF	; 255
 51a:	3f 4f       	sbci	r19, 0xFF	; 255
 51c:	31 83       	std	Z+1, r19	; 0x01
 51e:	20 83       	st	Z, r18

    // Ensure that the data register empty interrupt is enabled to handle transmission of
    // the new data.
    UCSR0B |= (1 << UDRIE0);
 520:	e1 ec       	ldi	r30, 0xC1	; 193
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	80 62       	ori	r24, 0x20	; 32
 528:	80 83       	st	Z, r24

    // Return the status register to its original state. Re-enabling interrupts
    // if they were disabled.
    if(interrupts_enabled) sei();
 52a:	99 23       	and	r25, r25
 52c:	19 f0       	breq	.+6      	; 0x534 <uart_putc+0x78>
 52e:	78 94       	sei

    return 0;
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
 534:	80 e0       	ldi	r24, 0x00	; 0
}
 536:	08 95       	ret

00000538 <uart_getc>:
{
    uint8_t c;
    uint8_t interrupts_enabled;

    // Wait for input
    while(uart_buffer_input.bytes == 0);
 538:	e6 e6       	ldi	r30, 0x66	; 102
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	80 81       	ld	r24, Z
 53e:	91 81       	ldd	r25, Z+1	; 0x01
 540:	89 2b       	or	r24, r25
 542:	e1 f3       	breq	.-8      	; 0x53c <uart_getc+0x4>

    interrupts_enabled = (SREG >> SREG_I) & 0x1;
 544:	9f b7       	in	r25, 0x3f	; 63
    cli();
 546:	f8 94       	cli

    if(uart_buffer_input.index - uart_buffer_input.bytes < 0) {
 548:	e4 e6       	ldi	r30, 0x64	; 100
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	20 81       	ld	r18, Z
 54e:	31 81       	ldd	r19, Z+1	; 0x01
 550:	a6 e6       	ldi	r26, 0x66	; 102
 552:	b1 e0       	ldi	r27, 0x01	; 1
 554:	2d 91       	ld	r18, X+
 556:	3c 91       	ld	r19, X
 558:	11 97       	sbiw	r26, 0x01	; 1
        c = uart_buffer_input.buffer[uart_buffer_input.index - uart_buffer_input.bytes + UART_BUFFER_SIZE];
    } else {
        c = uart_buffer_input.buffer[uart_buffer_input.index - uart_buffer_input.bytes];
 55a:	01 90       	ld	r0, Z+
 55c:	f0 81       	ld	r31, Z
 55e:	e0 2d       	mov	r30, r0
 560:	2d 91       	ld	r18, X+
 562:	3c 91       	ld	r19, X
 564:	11 97       	sbiw	r26, 0x01	; 1
 566:	e2 1b       	sub	r30, r18
 568:	f3 0b       	sbc	r31, r19
 56a:	e0 50       	subi	r30, 0x00	; 0
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	80 81       	ld	r24, Z
    }

    uart_buffer_input.bytes--;
 570:	2d 91       	ld	r18, X+
 572:	3c 91       	ld	r19, X
 574:	11 97       	sbiw	r26, 0x01	; 1
 576:	21 50       	subi	r18, 0x01	; 1
 578:	31 09       	sbc	r19, r1
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	3c 93       	st	X, r19
 57e:	2e 93       	st	-X, r18

    if(interrupts_enabled) sei();
 580:	99 23       	and	r25, r25
 582:	0c f4       	brge	.+2      	; 0x586 <uart_getc+0x4e>
 584:	78 94       	sei

    return c;
}
 586:	08 95       	ret

00000588 <__vector_18>:

ISR(USART_RX_vect) {
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
    char c;

    c = UDR0;
 5a0:	20 91 c6 00 	lds	r18, 0x00C6

    if(ECHO) uart_putc(c);
    
    if(uart_buffer_input.bytes >= UART_BUFFER_SIZE) {
 5a4:	80 91 66 01 	lds	r24, 0x0166
 5a8:	90 91 67 01 	lds	r25, 0x0167
 5ac:	84 36       	cpi	r24, 0x64	; 100
 5ae:	91 05       	cpc	r25, r1
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__vector_18+0x32>
        uart_buffer_input.overrun = 1;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	80 93 68 01 	sts	0x0168, r24
        return;
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <__vector_18+0x72>
    }

    uart_buffer_input.buffer[uart_buffer_input.index] = c;
 5ba:	a4 e6       	ldi	r26, 0x64	; 100
 5bc:	b1 e0       	ldi	r27, 0x01	; 1
 5be:	ed 91       	ld	r30, X+
 5c0:	fc 91       	ld	r31, X
 5c2:	11 97       	sbiw	r26, 0x01	; 1
 5c4:	e0 50       	subi	r30, 0x00	; 0
 5c6:	ff 4f       	sbci	r31, 0xFF	; 255
 5c8:	20 83       	st	Z, r18
    uart_buffer_input.bytes++;
 5ca:	e6 e6       	ldi	r30, 0x66	; 102
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	80 81       	ld	r24, Z
 5d0:	91 81       	ldd	r25, Z+1	; 0x01
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	91 83       	std	Z+1, r25	; 0x01
 5d6:	80 83       	st	Z, r24

    if(uart_buffer_input.index + 1 == UART_BUFFER_SIZE) {
 5d8:	8d 91       	ld	r24, X+
 5da:	9c 91       	ld	r25, X
 5dc:	83 36       	cpi	r24, 0x63	; 99
 5de:	91 05       	cpc	r25, r1
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__vector_18+0x64>
        uart_buffer_input.index = 0;
 5e2:	10 92 65 01 	sts	0x0165, r1
 5e6:	10 92 64 01 	sts	0x0164, r1
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <__vector_18+0x72>
    } else uart_buffer_input.index++;
 5ec:	e4 e6       	ldi	r30, 0x64	; 100
 5ee:	f1 e0       	ldi	r31, 0x01	; 1
 5f0:	80 81       	ld	r24, Z
 5f2:	91 81       	ldd	r25, Z+1	; 0x01
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	91 83       	std	Z+1, r25	; 0x01
 5f8:	80 83       	st	Z, r24
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_19>:

ISR(USART_UDRE_vect) {
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
    if(uart_buffer_output.bytes > 0) {
 628:	80 91 cf 01 	lds	r24, 0x01CF
 62c:	90 91 d0 01 	lds	r25, 0x01D0
 630:	89 2b       	or	r24, r25
 632:	f1 f0       	breq	.+60     	; 0x670 <__vector_19+0x5e>
        if(uart_buffer_output.index - uart_buffer_output.bytes < 0) {
 634:	ed ec       	ldi	r30, 0xCD	; 205
 636:	f1 e0       	ldi	r31, 0x01	; 1
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	af ec       	ldi	r26, 0xCF	; 207
 63e:	b1 e0       	ldi	r27, 0x01	; 1
 640:	8d 91       	ld	r24, X+
 642:	9c 91       	ld	r25, X
 644:	11 97       	sbiw	r26, 0x01	; 1
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
                                             uart_buffer_output.bytes + UART_BUFFER_SIZE];
        } else {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
 646:	01 90       	ld	r0, Z+
 648:	f0 81       	ld	r31, Z
 64a:	e0 2d       	mov	r30, r0
                                             uart_buffer_output.bytes];
 64c:	8d 91       	ld	r24, X+
 64e:	9c 91       	ld	r25, X
 650:	11 97       	sbiw	r26, 0x01	; 1
    if(uart_buffer_output.bytes > 0) {
        if(uart_buffer_output.index - uart_buffer_output.bytes < 0) {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
                                             uart_buffer_output.bytes + UART_BUFFER_SIZE];
        } else {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
 652:	e8 1b       	sub	r30, r24
 654:	f9 0b       	sbc	r31, r25
 656:	e7 59       	subi	r30, 0x97	; 151
 658:	fe 4f       	sbci	r31, 0xFE	; 254
 65a:	80 81       	ld	r24, Z
 65c:	80 93 c6 00 	sts	0x00C6, r24
                                             uart_buffer_output.bytes];
        }

        uart_buffer_output.bytes--;
 660:	8d 91       	ld	r24, X+
 662:	9c 91       	ld	r25, X
 664:	11 97       	sbiw	r26, 0x01	; 1
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	9c 93       	st	X, r25
 66c:	8e 93       	st	-X, r24
 66e:	05 c0       	rjmp	.+10     	; 0x67a <__vector_19+0x68>
    } else {
        // If there is no more bytes to transmit clear the data register empty interrupt.
        UCSR0B &= ~(1 << UDRIE0);
 670:	e1 ec       	ldi	r30, 0xC1	; 193
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	8f 7d       	andi	r24, 0xDF	; 223
 678:	80 83       	st	Z, r24
    }
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__subsf3>:
 690:	50 58       	subi	r21, 0x80	; 128

00000692 <__addsf3>:
 692:	bb 27       	eor	r27, r27
 694:	aa 27       	eor	r26, r26
 696:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__addsf3x>
 69a:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 69e:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__addsf3+0x20>
 6a4:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__addsf3+0x20>
 6aa:	39 f4       	brne	.+14     	; 0x6ba <__addsf3+0x28>
 6ac:	9f 3f       	cpi	r25, 0xFF	; 255
 6ae:	19 f4       	brne	.+6      	; 0x6b6 <__addsf3+0x24>
 6b0:	26 f4       	brtc	.+8      	; 0x6ba <__addsf3+0x28>
 6b2:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>
 6b6:	0e f4       	brtc	.+2      	; 0x6ba <__addsf3+0x28>
 6b8:	e0 95       	com	r30
 6ba:	e7 fb       	bst	r30, 7
 6bc:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>

000006c0 <__addsf3x>:
 6c0:	e9 2f       	mov	r30, r25
 6c2:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 6c6:	58 f3       	brcs	.-42     	; 0x69e <__addsf3+0xc>
 6c8:	ba 17       	cp	r27, r26
 6ca:	62 07       	cpc	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	95 07       	cpc	r25, r21
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__addsf3x+0x1c>
 6d4:	79 f4       	brne	.+30     	; 0x6f4 <__addsf3x+0x34>
 6d6:	a6 f5       	brtc	.+104    	; 0x740 <__addsf3x+0x80>
 6d8:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_zero>
 6dc:	0e f4       	brtc	.+2      	; 0x6e0 <__addsf3x+0x20>
 6de:	e0 95       	com	r30
 6e0:	0b 2e       	mov	r0, r27
 6e2:	ba 2f       	mov	r27, r26
 6e4:	a0 2d       	mov	r26, r0
 6e6:	0b 01       	movw	r0, r22
 6e8:	b9 01       	movw	r22, r18
 6ea:	90 01       	movw	r18, r0
 6ec:	0c 01       	movw	r0, r24
 6ee:	ca 01       	movw	r24, r20
 6f0:	a0 01       	movw	r20, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	ff 27       	eor	r31, r31
 6f6:	59 1b       	sub	r21, r25
 6f8:	99 f0       	breq	.+38     	; 0x720 <__addsf3x+0x60>
 6fa:	59 3f       	cpi	r21, 0xF9	; 249
 6fc:	50 f4       	brcc	.+20     	; 0x712 <__addsf3x+0x52>
 6fe:	50 3e       	cpi	r21, 0xE0	; 224
 700:	68 f1       	brcs	.+90     	; 0x75c <__addsf3x+0x9c>
 702:	1a 16       	cp	r1, r26
 704:	f0 40       	sbci	r31, 0x00	; 0
 706:	a2 2f       	mov	r26, r18
 708:	23 2f       	mov	r18, r19
 70a:	34 2f       	mov	r19, r20
 70c:	44 27       	eor	r20, r20
 70e:	58 5f       	subi	r21, 0xF8	; 248
 710:	f3 cf       	rjmp	.-26     	; 0x6f8 <__addsf3x+0x38>
 712:	46 95       	lsr	r20
 714:	37 95       	ror	r19
 716:	27 95       	ror	r18
 718:	a7 95       	ror	r26
 71a:	f0 40       	sbci	r31, 0x00	; 0
 71c:	53 95       	inc	r21
 71e:	c9 f7       	brne	.-14     	; 0x712 <__addsf3x+0x52>
 720:	7e f4       	brtc	.+30     	; 0x740 <__addsf3x+0x80>
 722:	1f 16       	cp	r1, r31
 724:	ba 0b       	sbc	r27, r26
 726:	62 0b       	sbc	r22, r18
 728:	73 0b       	sbc	r23, r19
 72a:	84 0b       	sbc	r24, r20
 72c:	ba f0       	brmi	.+46     	; 0x75c <__addsf3x+0x9c>
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	a1 f0       	breq	.+40     	; 0x75a <__addsf3x+0x9a>
 732:	ff 0f       	add	r31, r31
 734:	bb 1f       	adc	r27, r27
 736:	66 1f       	adc	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	c2 f7       	brpl	.-16     	; 0x72e <__addsf3x+0x6e>
 73e:	0e c0       	rjmp	.+28     	; 0x75c <__addsf3x+0x9c>
 740:	ba 0f       	add	r27, r26
 742:	62 1f       	adc	r22, r18
 744:	73 1f       	adc	r23, r19
 746:	84 1f       	adc	r24, r20
 748:	48 f4       	brcc	.+18     	; 0x75c <__addsf3x+0x9c>
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	9e 3f       	cpi	r25, 0xFE	; 254
 756:	08 f0       	brcs	.+2      	; 0x75a <__addsf3x+0x9a>
 758:	b0 cf       	rjmp	.-160    	; 0x6ba <__addsf3+0x28>
 75a:	93 95       	inc	r25
 75c:	88 0f       	add	r24, r24
 75e:	08 f0       	brcs	.+2      	; 0x762 <__addsf3x+0xa2>
 760:	99 27       	eor	r25, r25
 762:	ee 0f       	add	r30, r30
 764:	97 95       	ror	r25
 766:	87 95       	ror	r24
 768:	08 95       	ret

0000076a <__divsf3>:
 76a:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3x>
 76e:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 772:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 776:	58 f0       	brcs	.+22     	; 0x78e <__divsf3+0x24>
 778:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 77c:	40 f0       	brcs	.+16     	; 0x78e <__divsf3+0x24>
 77e:	29 f4       	brne	.+10     	; 0x78a <__divsf3+0x20>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	29 f0       	breq	.+10     	; 0x78e <__divsf3+0x24>
 784:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 788:	51 11       	cpse	r21, r1
 78a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 78e:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>

00000792 <__divsf3x>:
 792:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 796:	68 f3       	brcs	.-38     	; 0x772 <__divsf3+0x8>

00000798 <__divsf3_pse>:
 798:	99 23       	and	r25, r25
 79a:	b1 f3       	breq	.-20     	; 0x788 <__divsf3+0x1e>
 79c:	55 23       	and	r21, r21
 79e:	91 f3       	breq	.-28     	; 0x784 <__divsf3+0x1a>
 7a0:	95 1b       	sub	r25, r21
 7a2:	55 0b       	sbc	r21, r21
 7a4:	bb 27       	eor	r27, r27
 7a6:	aa 27       	eor	r26, r26
 7a8:	62 17       	cp	r22, r18
 7aa:	73 07       	cpc	r23, r19
 7ac:	84 07       	cpc	r24, r20
 7ae:	38 f0       	brcs	.+14     	; 0x7be <__divsf3_pse+0x26>
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	5f 4f       	sbci	r21, 0xFF	; 255
 7b4:	22 0f       	add	r18, r18
 7b6:	33 1f       	adc	r19, r19
 7b8:	44 1f       	adc	r20, r20
 7ba:	aa 1f       	adc	r26, r26
 7bc:	a9 f3       	breq	.-22     	; 0x7a8 <__divsf3_pse+0x10>
 7be:	35 d0       	rcall	.+106    	; 0x82a <__divsf3_pse+0x92>
 7c0:	0e 2e       	mov	r0, r30
 7c2:	3a f0       	brmi	.+14     	; 0x7d2 <__divsf3_pse+0x3a>
 7c4:	e0 e8       	ldi	r30, 0x80	; 128
 7c6:	32 d0       	rcall	.+100    	; 0x82c <__divsf3_pse+0x94>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	50 40       	sbci	r21, 0x00	; 0
 7cc:	e6 95       	lsr	r30
 7ce:	00 1c       	adc	r0, r0
 7d0:	ca f7       	brpl	.-14     	; 0x7c4 <__divsf3_pse+0x2c>
 7d2:	2b d0       	rcall	.+86     	; 0x82a <__divsf3_pse+0x92>
 7d4:	fe 2f       	mov	r31, r30
 7d6:	29 d0       	rcall	.+82     	; 0x82a <__divsf3_pse+0x92>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	bb 1f       	adc	r27, r27
 7e0:	26 17       	cp	r18, r22
 7e2:	37 07       	cpc	r19, r23
 7e4:	48 07       	cpc	r20, r24
 7e6:	ab 07       	cpc	r26, r27
 7e8:	b0 e8       	ldi	r27, 0x80	; 128
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__divsf3_pse+0x56>
 7ec:	bb 0b       	sbc	r27, r27
 7ee:	80 2d       	mov	r24, r0
 7f0:	bf 01       	movw	r22, r30
 7f2:	ff 27       	eor	r31, r31
 7f4:	93 58       	subi	r25, 0x83	; 131
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255
 7f8:	3a f0       	brmi	.+14     	; 0x808 <__divsf3_pse+0x70>
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	51 05       	cpc	r21, r1
 7fe:	78 f0       	brcs	.+30     	; 0x81e <__divsf3_pse+0x86>
 800:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 804:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 808:	5f 3f       	cpi	r21, 0xFF	; 255
 80a:	e4 f3       	brlt	.-8      	; 0x804 <__divsf3_pse+0x6c>
 80c:	98 3e       	cpi	r25, 0xE8	; 232
 80e:	d4 f3       	brlt	.-12     	; 0x804 <__divsf3_pse+0x6c>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b7 95       	ror	r27
 818:	f7 95       	ror	r31
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	c9 f7       	brne	.-14     	; 0x810 <__divsf3_pse+0x78>
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret
 82a:	e1 e0       	ldi	r30, 0x01	; 1
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	bb 1f       	adc	r27, r27
 834:	62 17       	cp	r22, r18
 836:	73 07       	cpc	r23, r19
 838:	84 07       	cpc	r24, r20
 83a:	ba 07       	cpc	r27, r26
 83c:	20 f0       	brcs	.+8      	; 0x846 <__divsf3_pse+0xae>
 83e:	62 1b       	sub	r22, r18
 840:	73 0b       	sbc	r23, r19
 842:	84 0b       	sbc	r24, r20
 844:	ba 0b       	sbc	r27, r26
 846:	ee 1f       	adc	r30, r30
 848:	88 f7       	brcc	.-30     	; 0x82c <__divsf3_pse+0x94>
 84a:	e0 95       	com	r30
 84c:	08 95       	ret

0000084e <__floatundisf>:
 84e:	e8 94       	clt

00000850 <__fp_di2sf>:
 850:	f9 2f       	mov	r31, r25
 852:	96 eb       	ldi	r25, 0xB6	; 182
 854:	ff 23       	and	r31, r31
 856:	81 f0       	breq	.+32     	; 0x878 <__fp_di2sf+0x28>
 858:	12 16       	cp	r1, r18
 85a:	13 06       	cpc	r1, r19
 85c:	14 06       	cpc	r1, r20
 85e:	44 0b       	sbc	r20, r20
 860:	93 95       	inc	r25
 862:	f6 95       	lsr	r31
 864:	87 95       	ror	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	57 95       	ror	r21
 86c:	40 40       	sbci	r20, 0x00	; 0
 86e:	ff 23       	and	r31, r31
 870:	b9 f7       	brne	.-18     	; 0x860 <__fp_di2sf+0x10>
 872:	1b c0       	rjmp	.+54     	; 0x8aa <__fp_di2sf+0x5a>
 874:	99 27       	eor	r25, r25
 876:	08 95       	ret
 878:	88 23       	and	r24, r24
 87a:	51 f4       	brne	.+20     	; 0x890 <__fp_di2sf+0x40>
 87c:	98 50       	subi	r25, 0x08	; 8
 87e:	d2 f7       	brpl	.-12     	; 0x874 <__fp_di2sf+0x24>
 880:	87 2b       	or	r24, r23
 882:	76 2f       	mov	r23, r22
 884:	65 2f       	mov	r22, r21
 886:	54 2f       	mov	r21, r20
 888:	43 2f       	mov	r20, r19
 88a:	32 2f       	mov	r19, r18
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	b1 f3       	breq	.-20     	; 0x87c <__fp_di2sf+0x2c>
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	44 0b       	sbc	r20, r20
 898:	88 23       	and	r24, r24
 89a:	3a f0       	brmi	.+14     	; 0x8aa <__fp_di2sf+0x5a>
 89c:	9a 95       	dec	r25
 89e:	44 0f       	add	r20, r20
 8a0:	55 1f       	adc	r21, r21
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	ca f7       	brpl	.-14     	; 0x89c <__fp_di2sf+0x4c>
 8aa:	55 23       	and	r21, r21
 8ac:	4a f4       	brpl	.+18     	; 0x8c0 <__fp_di2sf+0x70>
 8ae:	44 0f       	add	r20, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_di2sf+0x68>
 8b4:	60 ff       	sbrs	r22, 0
 8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <__fp_di2sf+0x70>
 8b8:	6f 5f       	subi	r22, 0xFF	; 255
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	88 0f       	add	r24, r24
 8c2:	96 95       	lsr	r25
 8c4:	87 95       	ror	r24
 8c6:	97 f9       	bld	r25, 7
 8c8:	08 95       	ret

000008ca <__fp_cmp>:
 8ca:	99 0f       	add	r25, r25
 8cc:	00 08       	sbc	r0, r0
 8ce:	55 0f       	add	r21, r21
 8d0:	aa 0b       	sbc	r26, r26
 8d2:	e0 e8       	ldi	r30, 0x80	; 128
 8d4:	fe ef       	ldi	r31, 0xFE	; 254
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	e8 07       	cpc	r30, r24
 8dc:	f9 07       	cpc	r31, r25
 8de:	c0 f0       	brcs	.+48     	; 0x910 <__stack+0x11>
 8e0:	12 16       	cp	r1, r18
 8e2:	13 06       	cpc	r1, r19
 8e4:	e4 07       	cpc	r30, r20
 8e6:	f5 07       	cpc	r31, r21
 8e8:	98 f0       	brcs	.+38     	; 0x910 <__stack+0x11>
 8ea:	62 1b       	sub	r22, r18
 8ec:	73 0b       	sbc	r23, r19
 8ee:	84 0b       	sbc	r24, r20
 8f0:	95 0b       	sbc	r25, r21
 8f2:	39 f4       	brne	.+14     	; 0x902 <__stack+0x3>
 8f4:	0a 26       	eor	r0, r26
 8f6:	61 f0       	breq	.+24     	; 0x910 <__stack+0x11>
 8f8:	23 2b       	or	r18, r19
 8fa:	24 2b       	or	r18, r20
 8fc:	25 2b       	or	r18, r21
 8fe:	21 f4       	brne	.+8      	; 0x908 <__stack+0x9>
 900:	08 95       	ret
 902:	0a 26       	eor	r0, r26
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	a1 40       	sbci	r26, 0x01	; 1
 908:	a6 95       	lsr	r26
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	81 1d       	adc	r24, r1
 90e:	81 1d       	adc	r24, r1
 910:	08 95       	ret

00000912 <__fp_inf>:
 912:	97 f9       	bld	r25, 7
 914:	9f 67       	ori	r25, 0x7F	; 127
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	08 95       	ret

0000091e <__fp_nan>:
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	80 ec       	ldi	r24, 0xC0	; 192
 922:	08 95       	ret

00000924 <__fp_pscA>:
 924:	00 24       	eor	r0, r0
 926:	0a 94       	dec	r0
 928:	16 16       	cp	r1, r22
 92a:	17 06       	cpc	r1, r23
 92c:	18 06       	cpc	r1, r24
 92e:	09 06       	cpc	r0, r25
 930:	08 95       	ret

00000932 <__fp_pscB>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	05 06       	cpc	r0, r21
 93e:	08 95       	ret

00000940 <__fp_round>:
 940:	09 2e       	mov	r0, r25
 942:	03 94       	inc	r0
 944:	00 0c       	add	r0, r0
 946:	11 f4       	brne	.+4      	; 0x94c <__fp_round+0xc>
 948:	88 23       	and	r24, r24
 94a:	52 f0       	brmi	.+20     	; 0x960 <__fp_round+0x20>
 94c:	bb 0f       	add	r27, r27
 94e:	40 f4       	brcc	.+16     	; 0x960 <__fp_round+0x20>
 950:	bf 2b       	or	r27, r31
 952:	11 f4       	brne	.+4      	; 0x958 <__fp_round+0x18>
 954:	60 ff       	sbrs	r22, 0
 956:	04 c0       	rjmp	.+8      	; 0x960 <__fp_round+0x20>
 958:	6f 5f       	subi	r22, 0xFF	; 255
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__fp_split3>:
 962:	57 fd       	sbrc	r21, 7
 964:	90 58       	subi	r25, 0x80	; 128
 966:	44 0f       	add	r20, r20
 968:	55 1f       	adc	r21, r21
 96a:	59 f0       	breq	.+22     	; 0x982 <__fp_splitA+0x10>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	71 f0       	breq	.+28     	; 0x98c <__fp_splitA+0x1a>
 970:	47 95       	ror	r20

00000972 <__fp_splitA>:
 972:	88 0f       	add	r24, r24
 974:	97 fb       	bst	r25, 7
 976:	99 1f       	adc	r25, r25
 978:	61 f0       	breq	.+24     	; 0x992 <__fp_splitA+0x20>
 97a:	9f 3f       	cpi	r25, 0xFF	; 255
 97c:	79 f0       	breq	.+30     	; 0x99c <__fp_splitA+0x2a>
 97e:	87 95       	ror	r24
 980:	08 95       	ret
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	14 06       	cpc	r1, r20
 988:	55 1f       	adc	r21, r21
 98a:	f2 cf       	rjmp	.-28     	; 0x970 <__fp_split3+0xe>
 98c:	46 95       	lsr	r20
 98e:	f1 df       	rcall	.-30     	; 0x972 <__fp_splitA>
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <__fp_splitA+0x30>
 992:	16 16       	cp	r1, r22
 994:	17 06       	cpc	r1, r23
 996:	18 06       	cpc	r1, r24
 998:	99 1f       	adc	r25, r25
 99a:	f1 cf       	rjmp	.-30     	; 0x97e <__fp_splitA+0xc>
 99c:	86 95       	lsr	r24
 99e:	71 05       	cpc	r23, r1
 9a0:	61 05       	cpc	r22, r1
 9a2:	08 94       	sec
 9a4:	08 95       	ret

000009a6 <__fp_zero>:
 9a6:	e8 94       	clt

000009a8 <__fp_szero>:
 9a8:	bb 27       	eor	r27, r27
 9aa:	66 27       	eor	r22, r22
 9ac:	77 27       	eor	r23, r23
 9ae:	cb 01       	movw	r24, r22
 9b0:	97 f9       	bld	r25, 7
 9b2:	08 95       	ret

000009b4 <__gesf2>:
 9b4:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_cmp>
 9b8:	08 f4       	brcc	.+2      	; 0x9bc <__gesf2+0x8>
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__divmodhi4>:
 9be:	97 fb       	bst	r25, 7
 9c0:	07 2e       	mov	r0, r23
 9c2:	16 f4       	brtc	.+4      	; 0x9c8 <__divmodhi4+0xa>
 9c4:	00 94       	com	r0
 9c6:	07 d0       	rcall	.+14     	; 0x9d6 <__divmodhi4_neg1>
 9c8:	77 fd       	sbrc	r23, 7
 9ca:	09 d0       	rcall	.+18     	; 0x9de <__divmodhi4_neg2>
 9cc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__udivmodhi4>
 9d0:	07 fc       	sbrc	r0, 7
 9d2:	05 d0       	rcall	.+10     	; 0x9de <__divmodhi4_neg2>
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__divmodhi4_exit>

000009d6 <__divmodhi4_neg1>:
 9d6:	90 95       	com	r25
 9d8:	81 95       	neg	r24
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__divmodhi4_neg2>:
 9de:	70 95       	com	r23
 9e0:	61 95       	neg	r22
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255

000009e4 <__divmodhi4_exit>:
 9e4:	08 95       	ret

000009e6 <__divmodsi4>:
 9e6:	05 2e       	mov	r0, r21
 9e8:	97 fb       	bst	r25, 7
 9ea:	1e f4       	brtc	.+6      	; 0x9f2 <__divmodsi4+0xc>
 9ec:	00 94       	com	r0
 9ee:	0e 94 0a 05 	call	0xa14	; 0xa14 <__negsi2>
 9f2:	57 fd       	sbrc	r21, 7
 9f4:	07 d0       	rcall	.+14     	; 0xa04 <__divmodsi4_neg2>
 9f6:	0e 94 63 05 	call	0xac6	; 0xac6 <__udivmodsi4>
 9fa:	07 fc       	sbrc	r0, 7
 9fc:	03 d0       	rcall	.+6      	; 0xa04 <__divmodsi4_neg2>
 9fe:	4e f4       	brtc	.+18     	; 0xa12 <__divmodsi4_exit>
 a00:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__negsi2>

00000a04 <__divmodsi4_neg2>:
 a04:	50 95       	com	r21
 a06:	40 95       	com	r20
 a08:	30 95       	com	r19
 a0a:	21 95       	neg	r18
 a0c:	3f 4f       	sbci	r19, 0xFF	; 255
 a0e:	4f 4f       	sbci	r20, 0xFF	; 255
 a10:	5f 4f       	sbci	r21, 0xFF	; 255

00000a12 <__divmodsi4_exit>:
 a12:	08 95       	ret

00000a14 <__negsi2>:
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__umulhisi3>:
 a24:	a2 9f       	mul	r26, r18
 a26:	b0 01       	movw	r22, r0
 a28:	b3 9f       	mul	r27, r19
 a2a:	c0 01       	movw	r24, r0
 a2c:	a3 9f       	mul	r26, r19
 a2e:	70 0d       	add	r23, r0
 a30:	81 1d       	adc	r24, r1
 a32:	11 24       	eor	r1, r1
 a34:	91 1d       	adc	r25, r1
 a36:	b2 9f       	mul	r27, r18
 a38:	70 0d       	add	r23, r0
 a3a:	81 1d       	adc	r24, r1
 a3c:	11 24       	eor	r1, r1
 a3e:	91 1d       	adc	r25, r1
 a40:	08 95       	ret

00000a42 <__ashldi3>:
 a42:	0f 93       	push	r16
 a44:	08 30       	cpi	r16, 0x08	; 8
 a46:	90 f0       	brcs	.+36     	; 0xa6c <__ashldi3+0x2a>
 a48:	98 2f       	mov	r25, r24
 a4a:	87 2f       	mov	r24, r23
 a4c:	76 2f       	mov	r23, r22
 a4e:	65 2f       	mov	r22, r21
 a50:	54 2f       	mov	r21, r20
 a52:	43 2f       	mov	r20, r19
 a54:	32 2f       	mov	r19, r18
 a56:	22 27       	eor	r18, r18
 a58:	08 50       	subi	r16, 0x08	; 8
 a5a:	f4 cf       	rjmp	.-24     	; 0xa44 <__ashldi3+0x2>
 a5c:	22 0f       	add	r18, r18
 a5e:	33 1f       	adc	r19, r19
 a60:	44 1f       	adc	r20, r20
 a62:	55 1f       	adc	r21, r21
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	0a 95       	dec	r16
 a6e:	b2 f7       	brpl	.-20     	; 0xa5c <__ashldi3+0x1a>
 a70:	0f 91       	pop	r16
 a72:	08 95       	ret

00000a74 <__adddi3_s8>:
 a74:	00 24       	eor	r0, r0
 a76:	a7 fd       	sbrc	r26, 7
 a78:	00 94       	com	r0
 a7a:	2a 0f       	add	r18, r26
 a7c:	30 1d       	adc	r19, r0
 a7e:	40 1d       	adc	r20, r0
 a80:	50 1d       	adc	r21, r0
 a82:	60 1d       	adc	r22, r0
 a84:	70 1d       	adc	r23, r0
 a86:	80 1d       	adc	r24, r0
 a88:	90 1d       	adc	r25, r0
 a8a:	08 95       	ret

00000a8c <__subdi3>:
 a8c:	2a 19       	sub	r18, r10
 a8e:	3b 09       	sbc	r19, r11
 a90:	4c 09       	sbc	r20, r12
 a92:	5d 09       	sbc	r21, r13
 a94:	6e 09       	sbc	r22, r14
 a96:	7f 09       	sbc	r23, r15
 a98:	80 0b       	sbc	r24, r16
 a9a:	91 0b       	sbc	r25, r17
 a9c:	08 95       	ret

00000a9e <__udivmodhi4>:
 a9e:	aa 1b       	sub	r26, r26
 aa0:	bb 1b       	sub	r27, r27
 aa2:	51 e1       	ldi	r21, 0x11	; 17
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__udivmodhi4_ep>

00000aa6 <__udivmodhi4_loop>:
 aa6:	aa 1f       	adc	r26, r26
 aa8:	bb 1f       	adc	r27, r27
 aaa:	a6 17       	cp	r26, r22
 aac:	b7 07       	cpc	r27, r23
 aae:	10 f0       	brcs	.+4      	; 0xab4 <__udivmodhi4_ep>
 ab0:	a6 1b       	sub	r26, r22
 ab2:	b7 0b       	sbc	r27, r23

00000ab4 <__udivmodhi4_ep>:
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	5a 95       	dec	r21
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__udivmodhi4_loop>
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	bc 01       	movw	r22, r24
 ac2:	cd 01       	movw	r24, r26
 ac4:	08 95       	ret

00000ac6 <__udivmodsi4>:
 ac6:	a1 e2       	ldi	r26, 0x21	; 33
 ac8:	1a 2e       	mov	r1, r26
 aca:	aa 1b       	sub	r26, r26
 acc:	bb 1b       	sub	r27, r27
 ace:	fd 01       	movw	r30, r26
 ad0:	0d c0       	rjmp	.+26     	; 0xaec <__udivmodsi4_ep>

00000ad2 <__udivmodsi4_loop>:
 ad2:	aa 1f       	adc	r26, r26
 ad4:	bb 1f       	adc	r27, r27
 ad6:	ee 1f       	adc	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	a2 17       	cp	r26, r18
 adc:	b3 07       	cpc	r27, r19
 ade:	e4 07       	cpc	r30, r20
 ae0:	f5 07       	cpc	r31, r21
 ae2:	20 f0       	brcs	.+8      	; 0xaec <__udivmodsi4_ep>
 ae4:	a2 1b       	sub	r26, r18
 ae6:	b3 0b       	sbc	r27, r19
 ae8:	e4 0b       	sbc	r30, r20
 aea:	f5 0b       	sbc	r31, r21

00000aec <__udivmodsi4_ep>:
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	1a 94       	dec	r1
 af6:	69 f7       	brne	.-38     	; 0xad2 <__udivmodsi4_loop>
 af8:	60 95       	com	r22
 afa:	70 95       	com	r23
 afc:	80 95       	com	r24
 afe:	90 95       	com	r25
 b00:	9b 01       	movw	r18, r22
 b02:	ac 01       	movw	r20, r24
 b04:	bd 01       	movw	r22, r26
 b06:	cf 01       	movw	r24, r30
 b08:	08 95       	ret

00000b0a <_exit>:
 b0a:	f8 94       	cli

00000b0c <__stop_program>:
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <__stop_program>
