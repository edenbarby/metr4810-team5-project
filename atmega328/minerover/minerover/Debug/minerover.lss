
minerover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800100  00800100  00000628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068f  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003aa  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041b  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000280  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_18>
  4c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 3d       	cpi	r26, 0xD2	; 210
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
/* private variables *********************************************************/
/* private function prototypes ***********************************************/


int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x8>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    int8_t speed;
    int8_t input[5];

    motor_init();
  9e:	0e 94 9f 00 	call	0x13e	; 0x13e <motor_init>
    servo_init();
  a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <servo_init>
    time_init();
  a6:	0e 94 29 01 	call	0x252	; 0x252 <time_init>
    uart_init();
  aa:	0e 94 2a 01 	call	0x254	; 0x254 <uart_init>

    sei();
  ae:	78 94       	sei
  b0:	7e 01       	movw	r14, r28
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	e8 0e       	add	r14, r24
  b6:	f1 1c       	adc	r15, r1
        
        // The serial packet will consist of a START byte, a value for the
        // left, right motor and servo and a STOP byte. The motor values will
        // be centered on 100 (i.e. a value of 100 is a motor speed of 0 with 0
        // direction). The servo angles will go from 0 to 180.
        input[0] = uart_getc();
  b8:	0e 94 b4 01 	call	0x368	; 0x368 <uart_getc>
        
        if(input[0] == START_BYTE) {
  bc:	82 31       	cpi	r24, 0x12	; 18
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x28>
  c0:	8e 01       	movw	r16, r28
  c2:	0e 5f       	subi	r16, 0xFE	; 254
  c4:	1f 4f       	sbci	r17, 0xFF	; 255
            for(i = 1; i < 5; i++) input[i] = uart_getc();
  c6:	0e 94 b4 01 	call	0x368	; 0x368 <uart_getc>
  ca:	f8 01       	movw	r30, r16
  cc:	81 93       	st	Z+, r24
  ce:	8f 01       	movw	r16, r30
  d0:	ee 15       	cp	r30, r14
  d2:	ff 05       	cpc	r31, r15
  d4:	c1 f7       	brne	.-16     	; 0xc6 <main+0x36>

            if(input[4] == STOP_BYTE) {
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	81 32       	cpi	r24, 0x21	; 33
  da:	71 f7       	brne	.-36     	; 0xb8 <main+0x28>
                speed = input[1] - 100;
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	84 56       	subi	r24, 0x64	; 100
                if(speed > 0) motor_left(speed, 1);
  e0:	18 16       	cp	r1, r24
  e2:	24 f4       	brge	.+8      	; 0xec <main+0x5c>
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	0e 94 be 00 	call	0x17c	; 0x17c <motor_left>
  ea:	0d c0       	rjmp	.+26     	; 0x106 <main+0x76>
                else if(speed == 0) motor_left(0, 0);
  ec:	81 11       	cpse	r24, r1
  ee:	05 c0       	rjmp	.+10     	; 0xfa <main+0x6a>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 be 00 	call	0x17c	; 0x17c <motor_left>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <main+0x76>
                else if(speed < 0) motor_left(-speed, -1);
  fa:	88 23       	and	r24, r24
  fc:	24 f4       	brge	.+8      	; 0x106 <main+0x76>
  fe:	6f ef       	ldi	r22, 0xFF	; 255
 100:	81 95       	neg	r24
 102:	0e 94 be 00 	call	0x17c	; 0x17c <motor_left>
                
                speed = input[2] - 100;
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	84 56       	subi	r24, 0x64	; 100
                if(speed > 0) motor_right(speed, 1);
 10a:	18 16       	cp	r1, r24
 10c:	24 f4       	brge	.+8      	; 0x116 <main+0x86>
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motor_right>
 114:	0d c0       	rjmp	.+26     	; 0x130 <main+0xa0>
                else if(speed == 0) motor_right(0, 0);
 116:	81 11       	cpse	r24, r1
 118:	05 c0       	rjmp	.+10     	; 0x124 <main+0x94>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motor_right>
 122:	06 c0       	rjmp	.+12     	; 0x130 <main+0xa0>
                else if(speed < 0) motor_right(-speed, -1);
 124:	88 23       	and	r24, r24
 126:	24 f4       	brge	.+8      	; 0x130 <main+0xa0>
 128:	6f ef       	ldi	r22, 0xFF	; 255
 12a:	81 95       	neg	r24
 12c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motor_right>
                
                servo_claw_angle(input[3]);
 130:	8c 81       	ldd	r24, Y+4	; 0x04
 132:	0e 94 13 01 	call	0x226	; 0x226 <servo_claw_angle>
                
                uart_putc(ACK);
 136:	88 ef       	ldi	r24, 0xF8	; 248
 138:	0e 94 76 01 	call	0x2ec	; 0x2ec <uart_putc>
 13c:	bd cf       	rjmp	.-134    	; 0xb8 <main+0x28>

0000013e <motor_init>:
/* private function prototypes ***********************************************/


extern void motor_init(void)
{
    DDRB |= (1 << PORTB5) | (1 << PORTB4);
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	80 63       	ori	r24, 0x30	; 48
 142:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PORTD6) | (1 << PORTD7) | (1 << PORTD5) | (1 << PORTD2);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	84 6e       	ori	r24, 0xE4	; 228
 148:	8a b9       	out	0x0a, r24	; 10

    PORTB &= ~((1 << PORTB4) | (1 << PORTB5));
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 7c       	andi	r24, 0xCF	; 207
 14e:	85 b9       	out	0x05, r24	; 5
    PORTD &= ~((1 << PORTD2) | (1 << PORTD7));
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8b 77       	andi	r24, 0x7B	; 123
 154:	8b b9       	out	0x0b, r24	; 11

    OCR0A = 0;
 156:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;
 158:	18 bc       	out	0x28, r1	; 40
    
    // Clear timer control registers.
    TCCR0A = 0;
 15a:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
 15c:	15 bc       	out	0x25, r1	; 37
    
    // Set timer 0 A and B to clear on compare match.
    TCCR0A |= (1 << COM0A1) | (0 << COM0A0);
 15e:	84 b5       	in	r24, 0x24	; 36
 160:	80 68       	ori	r24, 0x80	; 128
 162:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= (1 << COM0B1) | (0 << COM0B0);
 164:	84 b5       	in	r24, 0x24	; 36
 166:	80 62       	ori	r24, 0x20	; 32
 168:	84 bd       	out	0x24, r24	; 36
    
    // Set timer 0 to fast PWM with a TOP value of 0xFF.
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	83 60       	ori	r24, 0x03	; 3
 16e:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (0 << WGM02);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	85 bd       	out	0x25, r24	; 37
    
    // No clock prescaler.
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 174:	85 b5       	in	r24, 0x25	; 37
 176:	81 60       	ori	r24, 0x01	; 1
 178:	85 bd       	out	0x25, r24	; 37
 17a:	08 95       	ret

0000017c <motor_left>:
}

extern void motor_left(uint8_t speed, int8_t direction)
{
 17c:	85 36       	cpi	r24, 0x65	; 101
 17e:	08 f0       	brcs	.+2      	; 0x182 <motor_left+0x6>
 180:	84 e6       	ldi	r24, 0x64	; 100
    if(speed < 0) speed = 0;
    if(speed > 100) speed = 100;
    
    if(direction > 0) {
 182:	16 16       	cp	r1, r22
 184:	1c f4       	brge	.+6      	; 0x18c <motor_left+0x10>
        // Forward
        PORTB |=  (1 << PORTB4);
 186:	2c 9a       	sbi	0x05, 4	; 5
        PORTB &= ~(1 << PORTB5);
 188:	2d 98       	cbi	0x05, 5	; 5
 18a:	09 c0       	rjmp	.+18     	; 0x19e <motor_left+0x22>
    } else if(direction == 0) {
 18c:	61 11       	cpse	r22, r1
 18e:	03 c0       	rjmp	.+6      	; 0x196 <motor_left+0x1a>
        // Stationary
        PORTB &= ~(1 << PORTB4);
 190:	2c 98       	cbi	0x05, 4	; 5
        PORTB &= ~(1 << PORTB5);
 192:	2d 98       	cbi	0x05, 5	; 5
 194:	04 c0       	rjmp	.+8      	; 0x19e <motor_left+0x22>
    } else if(direction < 0) {
 196:	66 23       	and	r22, r22
 198:	14 f4       	brge	.+4      	; 0x19e <motor_left+0x22>
        // Backward
        PORTB &= ~(1 << PORTB4);
 19a:	2c 98       	cbi	0x05, 4	; 5
        PORTB |=  (1 << PORTB5);
 19c:	2d 9a       	sbi	0x05, 5	; 5
    }
    
    OCR0B = (uint8_t)((speed * 255) / 100);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	82 9f       	mul	r24, r18
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	64 e6       	ldi	r22, 0x64	; 100
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__divmodhi4>
 1ae:	68 bd       	out	0x28, r22	; 40
 1b0:	08 95       	ret

000001b2 <motor_right>:
}

extern void motor_right(uint8_t speed, int8_t direction)
{
 1b2:	85 36       	cpi	r24, 0x65	; 101
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <motor_right+0x6>
 1b6:	84 e6       	ldi	r24, 0x64	; 100
    if(speed < 0) speed = 0;
    if(speed > 100) speed = 100;
    
    if(direction > 0) {
 1b8:	16 16       	cp	r1, r22
 1ba:	1c f4       	brge	.+6      	; 0x1c2 <motor_right+0x10>
        // Forward
        PORTD |=  (1 << PORTD2);
 1bc:	5a 9a       	sbi	0x0b, 2	; 11
        PORTD &= ~(1 << PORTD7);
 1be:	5f 98       	cbi	0x0b, 7	; 11
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <motor_right+0x22>
        } else if(direction == 0) {
 1c2:	61 11       	cpse	r22, r1
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <motor_right+0x1a>
        // Stationary
        PORTD &= ~(1 << PORTD2);
 1c6:	5a 98       	cbi	0x0b, 2	; 11
        PORTD &= ~(1 << PORTD7);
 1c8:	5f 98       	cbi	0x0b, 7	; 11
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <motor_right+0x22>
        } else if(direction < 0) {
 1cc:	66 23       	and	r22, r22
 1ce:	14 f4       	brge	.+4      	; 0x1d4 <motor_right+0x22>
        // Backward
        PORTD &= ~(1 << PORTD2);
 1d0:	5a 98       	cbi	0x0b, 2	; 11
        PORTD |=  (1 << PORTD7);
 1d2:	5f 9a       	sbi	0x0b, 7	; 11
    }
    
    OCR0A = (uint8_t)((speed * 255) / 100);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	82 9f       	mul	r24, r18
 1d8:	c0 01       	movw	r24, r0
 1da:	11 24       	eor	r1, r1
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__divmodhi4>
 1e4:	67 bd       	out	0x27, r22	; 39
 1e6:	08 95       	ret

000001e8 <servo_init>:
#endif // SERVO2_EN


extern void servo_init(void)
{
    ICR1 = SERVO_TOP;
 1e8:	8f e1       	ldi	r24, 0x1F	; 31
 1ea:	9e e4       	ldi	r25, 0x4E	; 78
 1ec:	90 93 87 00 	sts	0x0087, r25
 1f0:	80 93 86 00 	sts	0x0086, r24
    
    TCCR1A = 0;
 1f4:	a0 e8       	ldi	r26, 0x80	; 128
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	1c 92       	st	X, r1
    TCCR1B = 0;
 1fa:	e1 e8       	ldi	r30, 0x81	; 129
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	10 82       	st	Z, r1
    
#ifdef SERVO1_EN
    DDRB |= (1 << PORTB2);
 200:	22 9a       	sbi	0x04, 2	; 4
    
    OCR1B = SERVO_DEFAULT;
 202:	8b ed       	ldi	r24, 0xDB	; 219
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	90 93 8b 00 	sts	0x008B, r25
 20a:	80 93 8a 00 	sts	0x008A, r24
    
    // Set timer 1 b to clear on compare match.
    TCCR1A |= (1 << COM1B1) | (0 << COM1B1);
 20e:	8c 91       	ld	r24, X
 210:	80 62       	ori	r24, 0x20	; 32
 212:	8c 93       	st	X, r24
#endif // SERVO2_EN


    // Set timer 1 to generate a phase and frequency correct PWM signal with
    // ICR1 as TOP.
    TCCR1A |= (0 << WGM11) | (0 << WGM10);
 214:	8c 91       	ld	r24, X
 216:	8c 93       	st	X, r24
    TCCR1B |= (1 << WGM13) | (0 << WGM12);
 218:	80 81       	ld	r24, Z
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	80 83       	st	Z, r24

    // Set the timer 1 clock source to have a prescaler of 8.
    TCCR1B |= (0 << CS12) | (1 << CS11) | (0 << CS10);
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <servo_claw_angle>:
}

extern void servo_claw_angle(uint8_t angle)
{
 226:	85 3b       	cpi	r24, 0xB5	; 181
 228:	08 f0       	brcs	.+2      	; 0x22c <servo_claw_angle+0x6>
 22a:	84 eb       	ldi	r24, 0xB4	; 180


#ifdef SERVO1_EN
static void servo_one_angle(uint8_t angle)
{
    OCR1B = (uint16_t)((SERVO_MAX - SERVO_MIN) * angle / 180 + SERVO_MIN);
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	a8 ee       	ldi	r26, 0xE8	; 232
 232:	b3 e0       	ldi	r27, 0x03	; 3
 234:	0e 94 93 02 	call	0x526	; 0x526 <__umulhisi3>
 238:	24 eb       	ldi	r18, 0xB4	; 180
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__divmodsi4>
 244:	29 51       	subi	r18, 0x19	; 25
 246:	3c 4f       	sbci	r19, 0xFC	; 252
 248:	30 93 8b 00 	sts	0x008B, r19
 24c:	20 93 8a 00 	sts	0x008A, r18
 250:	08 95       	ret

00000252 <time_init>:
/* private variables *********************************************************/
/* private function prototypes ***********************************************/


extern void time_init(void)
{
 252:	08 95       	ret

00000254 <uart_init>:

/* private function prototypes ***********************************************/


extern void uart_init(void)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
    // Setup the buffers by clearing them.
    memset((void *)uart_buffer_output.buffer, 0, UART_BUFFER_SIZE);
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	e9 e6       	ldi	r30, 0x69	; 105
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	df 01       	movw	r26, r30
 260:	98 2f       	mov	r25, r24
 262:	1d 92       	st	X+, r1
 264:	9a 95       	dec	r25
 266:	e9 f7       	brne	.-6      	; 0x262 <uart_init+0xe>
    uart_buffer_output.index   = 0;
 268:	10 92 ce 01 	sts	0x01CE, r1
 26c:	10 92 cd 01 	sts	0x01CD, r1
    uart_buffer_output.bytes   = 0;
 270:	10 92 d0 01 	sts	0x01D0, r1
 274:	10 92 cf 01 	sts	0x01CF, r1
    uart_buffer_output.overrun = 0;
 278:	10 92 d1 01 	sts	0x01D1, r1

    memset((void *)uart_buffer_input.buffer, 0, UART_BUFFER_SIZE);
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	df 01       	movw	r26, r30
 282:	1d 92       	st	X+, r1
 284:	8a 95       	dec	r24
 286:	e9 f7       	brne	.-6      	; 0x282 <uart_init+0x2e>
    uart_buffer_input.index   = 0;
 288:	10 92 65 01 	sts	0x0165, r1
 28c:	10 92 64 01 	sts	0x0164, r1
    uart_buffer_input.bytes   = 0;
 290:	10 92 67 01 	sts	0x0167, r1
 294:	10 92 66 01 	sts	0x0166, r1
    uart_buffer_input.overrun = 0;
 298:	10 92 68 01 	sts	0x0168, r1

    UCSR0A = 0;
 29c:	c0 ec       	ldi	r28, 0xC0	; 192
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	18 82       	st	Y, r1
    UCSR0B = 0;
 2a2:	a1 ec       	ldi	r26, 0xC1	; 193
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	1c 92       	st	X, r1
    UCSR0C = 0;
 2a8:	e2 ec       	ldi	r30, 0xC2	; 194
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	10 82       	st	Z, r1

    // Set the BAUD rate register.
    UBRR0H = (uint8_t)(UART_UBRR >> 8);
 2ae:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)(UART_UBRR >> 0);
 2b2:	83 e3       	ldi	r24, 0x33	; 51
 2b4:	80 93 c4 00 	sts	0x00C4, r24

    // Disable the UART double transmission speed mode.
    UCSR0A |= (0 << U2X0);
 2b8:	88 81       	ld	r24, Y
 2ba:	88 83       	st	Y, r24

    // Disable multi-processor communication mode.
    UCSR0A |= (0 << MPCM0);
 2bc:	88 81       	ld	r24, Y
 2be:	88 83       	st	Y, r24

    // Enable the receive complete and the data register empty interrupt and
    // disable the transmit complete interrupt.
    UCSR0B |= (1 << RXCIE0) | (0 << TXCIE0) | (1 << UDRIE0);
 2c0:	8c 91       	ld	r24, X
 2c2:	80 6a       	ori	r24, 0xA0	; 160
 2c4:	8c 93       	st	X, r24

    // Enable the receiver and transmitter.
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 2c6:	8c 91       	ld	r24, X
 2c8:	88 61       	ori	r24, 0x18	; 24
 2ca:	8c 93       	st	X, r24

    // Use 8 bit characters.
    UCSR0B |= (0 << UCSZ02);
 2cc:	8c 91       	ld	r24, X
 2ce:	8c 93       	st	X, r24
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 2d0:	80 81       	ld	r24, Z
 2d2:	86 60       	ori	r24, 0x06	; 6
 2d4:	80 83       	st	Z, r24

    // Enable the asynchronous mode.
    UCSR0C |= (0 << UMSEL01) | (0 << UMSEL00);
 2d6:	80 81       	ld	r24, Z
 2d8:	80 83       	st	Z, r24

    // Disable parity.
    UCSR0C |= (0 << UPM01) | (0 << UPM00);
 2da:	80 81       	ld	r24, Z
 2dc:	80 83       	st	Z, r24

    // Use 1 stop bits.
    UCSR0C |= (0 << USBS0);
 2de:	80 81       	ld	r24, Z
 2e0:	80 83       	st	Z, r24

    // Write zero to the clock polarity bit because we are using asynchronous mode.
    UCSR0C |= (0 << UCPOL0);
 2e2:	80 81       	ld	r24, Z
 2e4:	80 83       	st	Z, r24
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <uart_putc>:
extern uint8_t uart_putc(uint8_t c)
{
    uint8_t interrupts_enabled;

    // If the output buffer is full return 1 and set the buffer overrun flag.
    if(uart_buffer_output.bytes >= UART_BUFFER_SIZE) {
 2ec:	20 91 cf 01 	lds	r18, 0x01CF
 2f0:	30 91 d0 01 	lds	r19, 0x01D0
 2f4:	24 36       	cpi	r18, 0x64	; 100
 2f6:	31 05       	cpc	r19, r1
 2f8:	20 f0       	brcs	.+8      	; 0x302 <uart_putc+0x16>
        uart_buffer_output.overrun = 1;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 d1 01 	sts	0x01D1, r24
        return 1;
 300:	08 95       	ret
    }

    // Copy the status register and disable interrupts before adding to the
    // buffer. This will stop the ISR from modifying the buffer at the same time.
    interrupts_enabled = (SREG >> SREG_I) & 0x1;
 302:	9f b7       	in	r25, 0x3f	; 63
 304:	99 1f       	adc	r25, r25
 306:	99 27       	eor	r25, r25
 308:	99 1f       	adc	r25, r25
    cli();
 30a:	f8 94       	cli

    uart_buffer_output.buffer[uart_buffer_output.index] = c;
 30c:	ad ec       	ldi	r26, 0xCD	; 205
 30e:	b1 e0       	ldi	r27, 0x01	; 1
 310:	ed 91       	ld	r30, X+
 312:	fc 91       	ld	r31, X
 314:	11 97       	sbiw	r26, 0x01	; 1
 316:	e7 59       	subi	r30, 0x97	; 151
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	80 83       	st	Z, r24
    uart_buffer_output.bytes++;
 31c:	ef ec       	ldi	r30, 0xCF	; 207
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	20 81       	ld	r18, Z
 322:	31 81       	ldd	r19, Z+1	; 0x01
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	31 83       	std	Z+1, r19	; 0x01
 32a:	20 83       	st	Z, r18

    // If the index has reached the end, wrap around.
    if(uart_buffer_output.index + 1 == UART_BUFFER_SIZE) {
 32c:	2d 91       	ld	r18, X+
 32e:	3c 91       	ld	r19, X
 330:	23 36       	cpi	r18, 0x63	; 99
 332:	31 05       	cpc	r19, r1
 334:	29 f4       	brne	.+10     	; 0x340 <uart_putc+0x54>
        uart_buffer_output.index = 0;
 336:	10 92 ce 01 	sts	0x01CE, r1
 33a:	10 92 cd 01 	sts	0x01CD, r1
 33e:	08 c0       	rjmp	.+16     	; 0x350 <uart_putc+0x64>
    } else uart_buffer_output.index++;
 340:	ed ec       	ldi	r30, 0xCD	; 205
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	20 81       	ld	r18, Z
 346:	31 81       	ldd	r19, Z+1	; 0x01
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	31 83       	std	Z+1, r19	; 0x01
 34e:	20 83       	st	Z, r18

    // Ensure that the data register empty interrupt is enabled to handle transmission of
    // the new data.
    UCSR0B |= (1 << UDRIE0);
 350:	e1 ec       	ldi	r30, 0xC1	; 193
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 62       	ori	r24, 0x20	; 32
 358:	80 83       	st	Z, r24

    // Return the status register to its original state. Re-enabling interrupts
    // if they were disabled.
    if(interrupts_enabled) sei();
 35a:	99 23       	and	r25, r25
 35c:	19 f0       	breq	.+6      	; 0x364 <uart_putc+0x78>
 35e:	78 94       	sei

    return 0;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	80 e0       	ldi	r24, 0x00	; 0
}
 366:	08 95       	ret

00000368 <uart_getc>:
{
    uint8_t c;
    uint8_t interrupts_enabled;

    // Wait for input
    while(uart_buffer_input.bytes == 0);
 368:	e6 e6       	ldi	r30, 0x66	; 102
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	89 2b       	or	r24, r25
 372:	e1 f3       	breq	.-8      	; 0x36c <uart_getc+0x4>

    interrupts_enabled = (SREG >> SREG_I) & 0x1;
 374:	9f b7       	in	r25, 0x3f	; 63
    cli();
 376:	f8 94       	cli

    if(uart_buffer_input.index - uart_buffer_input.bytes < 0) {
 378:	e4 e6       	ldi	r30, 0x64	; 100
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	20 81       	ld	r18, Z
 37e:	31 81       	ldd	r19, Z+1	; 0x01
 380:	a6 e6       	ldi	r26, 0x66	; 102
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	2d 91       	ld	r18, X+
 386:	3c 91       	ld	r19, X
 388:	11 97       	sbiw	r26, 0x01	; 1
        c = uart_buffer_input.buffer[uart_buffer_input.index - uart_buffer_input.bytes + UART_BUFFER_SIZE];
    } else {
        c = uart_buffer_input.buffer[uart_buffer_input.index - uart_buffer_input.bytes];
 38a:	01 90       	ld	r0, Z+
 38c:	f0 81       	ld	r31, Z
 38e:	e0 2d       	mov	r30, r0
 390:	2d 91       	ld	r18, X+
 392:	3c 91       	ld	r19, X
 394:	11 97       	sbiw	r26, 0x01	; 1
 396:	e2 1b       	sub	r30, r18
 398:	f3 0b       	sbc	r31, r19
 39a:	e0 50       	subi	r30, 0x00	; 0
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	80 81       	ld	r24, Z
    }

    uart_buffer_input.bytes--;
 3a0:	2d 91       	ld	r18, X+
 3a2:	3c 91       	ld	r19, X
 3a4:	11 97       	sbiw	r26, 0x01	; 1
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	31 09       	sbc	r19, r1
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	3c 93       	st	X, r19
 3ae:	2e 93       	st	-X, r18

    if(interrupts_enabled) sei();
 3b0:	99 23       	and	r25, r25
 3b2:	0c f4       	brge	.+2      	; 0x3b6 <uart_getc+0x4e>
 3b4:	78 94       	sei

    return c;
}
 3b6:	08 95       	ret

000003b8 <__vector_18>:

ISR(USART_RX_vect) {
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
    char c;

    c = UDR0;
 3d0:	20 91 c6 00 	lds	r18, 0x00C6

    if(ECHO) uart_putc(c);
    
    if(uart_buffer_input.bytes >= UART_BUFFER_SIZE) {
 3d4:	80 91 66 01 	lds	r24, 0x0166
 3d8:	90 91 67 01 	lds	r25, 0x0167
 3dc:	84 36       	cpi	r24, 0x64	; 100
 3de:	91 05       	cpc	r25, r1
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__vector_18+0x32>
        uart_buffer_input.overrun = 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 68 01 	sts	0x0168, r24
        return;
 3e8:	20 c0       	rjmp	.+64     	; 0x42a <__vector_18+0x72>
    }

    uart_buffer_input.buffer[uart_buffer_input.index] = c;
 3ea:	a4 e6       	ldi	r26, 0x64	; 100
 3ec:	b1 e0       	ldi	r27, 0x01	; 1
 3ee:	ed 91       	ld	r30, X+
 3f0:	fc 91       	ld	r31, X
 3f2:	11 97       	sbiw	r26, 0x01	; 1
 3f4:	e0 50       	subi	r30, 0x00	; 0
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	20 83       	st	Z, r18
    uart_buffer_input.bytes++;
 3fa:	e6 e6       	ldi	r30, 0x66	; 102
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	80 81       	ld	r24, Z
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	91 83       	std	Z+1, r25	; 0x01
 406:	80 83       	st	Z, r24

    if(uart_buffer_input.index + 1 == UART_BUFFER_SIZE) {
 408:	8d 91       	ld	r24, X+
 40a:	9c 91       	ld	r25, X
 40c:	83 36       	cpi	r24, 0x63	; 99
 40e:	91 05       	cpc	r25, r1
 410:	29 f4       	brne	.+10     	; 0x41c <__vector_18+0x64>
        uart_buffer_input.index = 0;
 412:	10 92 65 01 	sts	0x0165, r1
 416:	10 92 64 01 	sts	0x0164, r1
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__vector_18+0x72>
    } else uart_buffer_input.index++;
 41c:	e4 e6       	ldi	r30, 0x64	; 100
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	80 81       	ld	r24, Z
 422:	91 81       	ldd	r25, Z+1	; 0x01
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_19>:

ISR(USART_UDRE_vect) {
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
    if(uart_buffer_output.bytes > 0) {
 458:	80 91 cf 01 	lds	r24, 0x01CF
 45c:	90 91 d0 01 	lds	r25, 0x01D0
 460:	89 2b       	or	r24, r25
 462:	f1 f0       	breq	.+60     	; 0x4a0 <__vector_19+0x5e>
        if(uart_buffer_output.index - uart_buffer_output.bytes < 0) {
 464:	ed ec       	ldi	r30, 0xCD	; 205
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	af ec       	ldi	r26, 0xCF	; 207
 46e:	b1 e0       	ldi	r27, 0x01	; 1
 470:	8d 91       	ld	r24, X+
 472:	9c 91       	ld	r25, X
 474:	11 97       	sbiw	r26, 0x01	; 1
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
                                             uart_buffer_output.bytes + UART_BUFFER_SIZE];
        } else {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
 476:	01 90       	ld	r0, Z+
 478:	f0 81       	ld	r31, Z
 47a:	e0 2d       	mov	r30, r0
                                             uart_buffer_output.bytes];
 47c:	8d 91       	ld	r24, X+
 47e:	9c 91       	ld	r25, X
 480:	11 97       	sbiw	r26, 0x01	; 1
    if(uart_buffer_output.bytes > 0) {
        if(uart_buffer_output.index - uart_buffer_output.bytes < 0) {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
                                             uart_buffer_output.bytes + UART_BUFFER_SIZE];
        } else {
            UDR0 = uart_buffer_output.buffer[uart_buffer_output.index -
 482:	e8 1b       	sub	r30, r24
 484:	f9 0b       	sbc	r31, r25
 486:	e7 59       	subi	r30, 0x97	; 151
 488:	fe 4f       	sbci	r31, 0xFE	; 254
 48a:	80 81       	ld	r24, Z
 48c:	80 93 c6 00 	sts	0x00C6, r24
                                             uart_buffer_output.bytes];
        }

        uart_buffer_output.bytes--;
 490:	8d 91       	ld	r24, X+
 492:	9c 91       	ld	r25, X
 494:	11 97       	sbiw	r26, 0x01	; 1
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	11 96       	adiw	r26, 0x01	; 1
 49a:	9c 93       	st	X, r25
 49c:	8e 93       	st	-X, r24
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__vector_19+0x68>
    } else {
        // If there is no more bytes to transmit clear the data register empty interrupt.
        UCSR0B &= ~(1 << UDRIE0);
 4a0:	e1 ec       	ldi	r30, 0xC1	; 193
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	8f 7d       	andi	r24, 0xDF	; 223
 4a8:	80 83       	st	Z, r24
    }
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__divmodhi4>:
 4c0:	97 fb       	bst	r25, 7
 4c2:	07 2e       	mov	r0, r23
 4c4:	16 f4       	brtc	.+4      	; 0x4ca <__divmodhi4+0xa>
 4c6:	00 94       	com	r0
 4c8:	07 d0       	rcall	.+14     	; 0x4d8 <__divmodhi4_neg1>
 4ca:	77 fd       	sbrc	r23, 7
 4cc:	09 d0       	rcall	.+18     	; 0x4e0 <__divmodhi4_neg2>
 4ce:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodhi4>
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	05 d0       	rcall	.+10     	; 0x4e0 <__divmodhi4_neg2>
 4d6:	3e f4       	brtc	.+14     	; 0x4e6 <__divmodhi4_exit>

000004d8 <__divmodhi4_neg1>:
 4d8:	90 95       	com	r25
 4da:	81 95       	neg	r24
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__divmodhi4_neg2>:
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255

000004e6 <__divmodhi4_exit>:
 4e6:	08 95       	ret

000004e8 <__divmodsi4>:
 4e8:	05 2e       	mov	r0, r21
 4ea:	97 fb       	bst	r25, 7
 4ec:	1e f4       	brtc	.+6      	; 0x4f4 <__divmodsi4+0xc>
 4ee:	00 94       	com	r0
 4f0:	0e 94 8b 02 	call	0x516	; 0x516 <__negsi2>
 4f4:	57 fd       	sbrc	r21, 7
 4f6:	07 d0       	rcall	.+14     	; 0x506 <__divmodsi4_neg2>
 4f8:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 4fc:	07 fc       	sbrc	r0, 7
 4fe:	03 d0       	rcall	.+6      	; 0x506 <__divmodsi4_neg2>
 500:	4e f4       	brtc	.+18     	; 0x514 <__divmodsi4_exit>
 502:	0c 94 8b 02 	jmp	0x516	; 0x516 <__negsi2>

00000506 <__divmodsi4_neg2>:
 506:	50 95       	com	r21
 508:	40 95       	com	r20
 50a:	30 95       	com	r19
 50c:	21 95       	neg	r18
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	4f 4f       	sbci	r20, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255

00000514 <__divmodsi4_exit>:
 514:	08 95       	ret

00000516 <__negsi2>:
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__umulhisi3>:
 526:	a2 9f       	mul	r26, r18
 528:	b0 01       	movw	r22, r0
 52a:	b3 9f       	mul	r27, r19
 52c:	c0 01       	movw	r24, r0
 52e:	a3 9f       	mul	r26, r19
 530:	70 0d       	add	r23, r0
 532:	81 1d       	adc	r24, r1
 534:	11 24       	eor	r1, r1
 536:	91 1d       	adc	r25, r1
 538:	b2 9f       	mul	r27, r18
 53a:	70 0d       	add	r23, r0
 53c:	81 1d       	adc	r24, r1
 53e:	11 24       	eor	r1, r1
 540:	91 1d       	adc	r25, r1
 542:	08 95       	ret

00000544 <__udivmodhi4>:
 544:	aa 1b       	sub	r26, r26
 546:	bb 1b       	sub	r27, r27
 548:	51 e1       	ldi	r21, 0x11	; 17
 54a:	07 c0       	rjmp	.+14     	; 0x55a <__udivmodhi4_ep>

0000054c <__udivmodhi4_loop>:
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	a6 17       	cp	r26, r22
 552:	b7 07       	cpc	r27, r23
 554:	10 f0       	brcs	.+4      	; 0x55a <__udivmodhi4_ep>
 556:	a6 1b       	sub	r26, r22
 558:	b7 0b       	sbc	r27, r23

0000055a <__udivmodhi4_ep>:
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	5a 95       	dec	r21
 560:	a9 f7       	brne	.-22     	; 0x54c <__udivmodhi4_loop>
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	bc 01       	movw	r22, r24
 568:	cd 01       	movw	r24, r26
 56a:	08 95       	ret

0000056c <__udivmodsi4>:
 56c:	a1 e2       	ldi	r26, 0x21	; 33
 56e:	1a 2e       	mov	r1, r26
 570:	aa 1b       	sub	r26, r26
 572:	bb 1b       	sub	r27, r27
 574:	fd 01       	movw	r30, r26
 576:	0d c0       	rjmp	.+26     	; 0x592 <__udivmodsi4_ep>

00000578 <__udivmodsi4_loop>:
 578:	aa 1f       	adc	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	ee 1f       	adc	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	a2 17       	cp	r26, r18
 582:	b3 07       	cpc	r27, r19
 584:	e4 07       	cpc	r30, r20
 586:	f5 07       	cpc	r31, r21
 588:	20 f0       	brcs	.+8      	; 0x592 <__udivmodsi4_ep>
 58a:	a2 1b       	sub	r26, r18
 58c:	b3 0b       	sbc	r27, r19
 58e:	e4 0b       	sbc	r30, r20
 590:	f5 0b       	sbc	r31, r21

00000592 <__udivmodsi4_ep>:
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a 94       	dec	r1
 59c:	69 f7       	brne	.-38     	; 0x578 <__udivmodsi4_loop>
 59e:	60 95       	com	r22
 5a0:	70 95       	com	r23
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	9b 01       	movw	r18, r22
 5a8:	ac 01       	movw	r20, r24
 5aa:	bd 01       	movw	r22, r26
 5ac:	cf 01       	movw	r24, r30
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
